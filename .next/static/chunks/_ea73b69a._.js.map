{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/G/Layercorp/Project%20Management%20System/frontend/src/app/main/dashboard/layout.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { toast } from \"react-toastify\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\n\r\ninterface DecodedToken {\r\n  exp: number;\r\n}\r\n\r\nexport default function DashboardLayout({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) {\r\n  const router = useRouter();\r\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (typeof window === \"undefined\") return;\r\n\r\n    const checkAuth = () => {\r\n      try {\r\n        const token = localStorage.getItem(\"token\");\r\n        if (!token) {\r\n          toast.error(\"You must log in to access the dashboard.\");\r\n          router.replace(\"/auth/login\");\r\n          return;\r\n        }\r\n\r\n        const decodedToken: DecodedToken = jwtDecode(token);\r\n        const currentTime = Math.floor(Date.now() / 1000);\r\n        if (decodedToken.exp < currentTime) {\r\n          toast.error(\"Session expired. Please log in again.\");\r\n          router.replace(\"/auth/login\");\r\n          return;\r\n        }\r\n\r\n        setIsAuthenticated(true);\r\n      } catch (error) {\r\n        toast.error(\"Invalid token. Please log in again.\");\r\n        router.replace(\"/auth/login\");\r\n      }\r\n    };\r\n\r\n    checkAuth();\r\n  }, []); // Runs only once on mount\r\n\r\n  if (isAuthenticated === null) {\r\n    return <div className=\"min-h-screen flex items-center justify-center\">Loading...</div>;\r\n  }\r\n\r\n  return <div className=\"min-h-screen bg-gray-50\">{isAuthenticated && children}</div>;\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;;;AALA;;;;;AAWe,SAAS,gBAAgB,EACtC,QAAQ,EAGT;;IACC,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAkB;IAEvE,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;qCAAE;YACR,uCAAmC;;YAAM;YAEzC,MAAM;uDAAY;oBAChB,IAAI;wBACF,MAAM,QAAQ,aAAa,OAAO,CAAC;wBACnC,IAAI,CAAC,OAAO;4BACV,sJAAA,CAAA,QAAK,CAAC,KAAK,CAAC;4BACZ,OAAO,OAAO,CAAC;4BACf;wBACF;wBAEA,MAAM,eAA6B,CAAA,GAAA,yJAAA,CAAA,YAAS,AAAD,EAAE;wBAC7C,MAAM,cAAc,KAAK,KAAK,CAAC,KAAK,GAAG,KAAK;wBAC5C,IAAI,aAAa,GAAG,GAAG,aAAa;4BAClC,sJAAA,CAAA,QAAK,CAAC,KAAK,CAAC;4BACZ,OAAO,OAAO,CAAC;4BACf;wBACF;wBAEA,mBAAmB;oBACrB,EAAE,OAAO,OAAO;wBACd,sJAAA,CAAA,QAAK,CAAC,KAAK,CAAC;wBACZ,OAAO,OAAO,CAAC;oBACjB;gBACF;;YAEA;QACF;oCAAG,EAAE,GAAG,0BAA0B;IAElC,IAAI,oBAAoB,MAAM;QAC5B,qBAAO,6LAAC;YAAI,WAAU;sBAAgD;;;;;;IACxE;IAEA,qBAAO,6LAAC;QAAI,WAAU;kBAA2B,mBAAmB;;;;;;AACtE;GA3CwB;;QAKP,qIAAA,CAAA,YAAS;;;KALF","debugId":null}},
    {"offset": {"line": 93, "column": 0}, "map": {"version":3,"sources":["file://C%3A/G/Layercorp/Project%20Management%20System/frontend/node_modules/jwt-decode/build/esm/index.js"],"sourcesContent":["export class InvalidTokenError extends Error {\n}\nInvalidTokenError.prototype.name = \"InvalidTokenError\";\nfunction b64DecodeUnicode(str) {\n    return decodeURIComponent(atob(str).replace(/(.)/g, (m, p) => {\n        let code = p.charCodeAt(0).toString(16).toUpperCase();\n        if (code.length < 2) {\n            code = \"0\" + code;\n        }\n        return \"%\" + code;\n    }));\n}\nfunction base64UrlDecode(str) {\n    let output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n        case 0:\n            break;\n        case 2:\n            output += \"==\";\n            break;\n        case 3:\n            output += \"=\";\n            break;\n        default:\n            throw new Error(\"base64 string is not of the correct length\");\n    }\n    try {\n        return b64DecodeUnicode(output);\n    }\n    catch (err) {\n        return atob(output);\n    }\n}\nexport function jwtDecode(token, options) {\n    if (typeof token !== \"string\") {\n        throw new InvalidTokenError(\"Invalid token specified: must be a string\");\n    }\n    options || (options = {});\n    const pos = options.header === true ? 0 : 1;\n    const part = token.split(\".\")[pos];\n    if (typeof part !== \"string\") {\n        throw new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);\n    }\n    let decoded;\n    try {\n        decoded = base64UrlDecode(part);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid base64 for part #${pos + 1} (${e.message})`);\n    }\n    try {\n        return JSON.parse(decoded);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid json for part #${pos + 1} (${e.message})`);\n    }\n}\n"],"names":[],"mappings":";;;;AAAO,MAAM,0BAA0B;AACvC;AACA,kBAAkB,SAAS,CAAC,IAAI,GAAG;AACnC,SAAS,iBAAiB,GAAG;IACzB,OAAO,mBAAmB,KAAK,KAAK,OAAO,CAAC,QAAQ,CAAC,GAAG;QACpD,IAAI,OAAO,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAC,IAAI,WAAW;QACnD,IAAI,KAAK,MAAM,GAAG,GAAG;YACjB,OAAO,MAAM;QACjB;QACA,OAAO,MAAM;IACjB;AACJ;AACA,SAAS,gBAAgB,GAAG;IACxB,IAAI,SAAS,IAAI,OAAO,CAAC,MAAM,KAAK,OAAO,CAAC,MAAM;IAClD,OAAQ,OAAO,MAAM,GAAG;QACpB,KAAK;YACD;QACJ,KAAK;YACD,UAAU;YACV;QACJ,KAAK;YACD,UAAU;YACV;QACJ;YACI,MAAM,IAAI,MAAM;IACxB;IACA,IAAI;QACA,OAAO,iBAAiB;IAC5B,EACA,OAAO,KAAK;QACR,OAAO,KAAK;IAChB;AACJ;AACO,SAAS,UAAU,KAAK,EAAE,OAAO;IACpC,IAAI,OAAO,UAAU,UAAU;QAC3B,MAAM,IAAI,kBAAkB;IAChC;IACA,WAAW,CAAC,UAAU,CAAC,CAAC;IACxB,MAAM,MAAM,QAAQ,MAAM,KAAK,OAAO,IAAI;IAC1C,MAAM,OAAO,MAAM,KAAK,CAAC,IAAI,CAAC,IAAI;IAClC,IAAI,OAAO,SAAS,UAAU;QAC1B,MAAM,IAAI,kBAAkB,CAAC,uCAAuC,EAAE,MAAM,GAAG;IACnF;IACA,IAAI;IACJ,IAAI;QACA,UAAU,gBAAgB;IAC9B,EACA,OAAO,GAAG;QACN,MAAM,IAAI,kBAAkB,CAAC,kDAAkD,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC;IAC7G;IACA,IAAI;QACA,OAAO,KAAK,KAAK,CAAC;IACtB,EACA,OAAO,GAAG;QACN,MAAM,IAAI,kBAAkB,CAAC,gDAAgD,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC;IAC3G;AACJ","ignoreList":[0],"debugId":null}}]
}